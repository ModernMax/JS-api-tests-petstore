import type { Options, Method, Response, GotRequestFunction } from 'got';
import { CookieJar } from 'tough-cookie';
import * as FormData from 'form-data';
declare type ElementOf<T> = T extends (infer E)[] ? E : T;
export declare abstract class BaseHttpRequest {
    protected options: ElementOf<Parameters<GotRequestFunction>>;
    prefixUrl(url: string | URL): this;
    /**
     * @param url Can be full url, but only in case prefixUrl is not set
     */
    url(url: string | URL): this;
    cookieJar(cookiesJar: CookieJar): this;
    method(method: Method): this;
    headers(headers: Record<string, string | undefined>): this;
    bearerToken(bearerToken?: string): this;
    searchParams(searchParams: Options["searchParams"]): this;
    abstract body(body: any): this;
    send<T = any>(): Promise<Response<T>>;
}
export declare class JsonRequest extends BaseHttpRequest {
    constructor();
    body(body: any): this;
}
export declare class FormRequest extends BaseHttpRequest {
    body(form: FormData): this;
}
export {};
