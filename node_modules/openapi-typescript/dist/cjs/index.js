"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WARNING_MESSAGE = void 0;
const path_1 = __importDefault(require("path"));
const prettier_1 = __importDefault(require("prettier"));
const parser_typescript_1 = __importDefault(require("prettier/parser-typescript"));
const utils_1 = require("./utils");
const index_1 = require("./transform/index");
__exportStar(require("./types"), exports);
exports.WARNING_MESSAGE = `/**
* This file was auto-generated by openapi-typescript.
* Do not make direct changes to the file.
*/


`;
function openapiTS(schema, options) {
    const version = (options && options.version) || utils_1.swaggerVersion(schema);
    let output = `${exports.WARNING_MESSAGE}
  ${index_1.transformAll(schema, {
        formatter: options && typeof options.formatter === "function" ? options.formatter : undefined,
        immutableTypes: (options && options.immutableTypes) || false,
        rawSchema: options && options.rawSchema,
        version,
    })}
`;
    let prettierOptions = {
        parser: "typescript",
        plugins: [parser_typescript_1.default],
    };
    if (options && options.prettierConfig) {
        try {
            const userOptions = prettier_1.default.resolveConfig.sync(path_1.default.resolve(process.cwd(), options.prettierConfig));
            prettierOptions = {
                ...(userOptions || {}),
                ...prettierOptions,
                plugins: [...prettierOptions.plugins, ...((userOptions && userOptions.plugins) || [])],
            };
        }
        catch (err) {
            console.error(`‚ùå ${err}`);
        }
    }
    return prettier_1.default.format(output, prettierOptions);
}
exports.default = openapiTS;
//# sourceMappingURL=index.js.map