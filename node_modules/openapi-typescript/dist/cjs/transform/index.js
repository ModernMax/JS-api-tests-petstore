"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformAll = void 0;
const utils_1 = require("../utils");
const headers_1 = require("./headers");
const operation_1 = require("./operation");
const paths_1 = require("./paths");
const responses_1 = require("./responses");
const schema_1 = require("./schema");
function transformAll(schema, { formatter, immutableTypes, rawSchema, version }) {
    const readonly = utils_1.tsReadonly(immutableTypes);
    let output = "";
    let operations = {};
    if (rawSchema) {
        switch (version) {
            case 2: {
                return `export interface definitions {\n  ${schema_1.transformSchemaObjMap(schema, {
                    formatter,
                    immutableTypes,
                    required: Object.keys(schema),
                    version,
                })}\n}`;
            }
            case 3: {
                return `export interface schemas {\n    ${schema_1.transformSchemaObjMap(schema, {
                    formatter,
                    immutableTypes,
                    required: Object.keys(schema),
                    version,
                })}\n  }\n\n`;
            }
        }
    }
    output += `export interface paths {\n`;
    if (schema.paths) {
        output += paths_1.transformPathsObj(schema.paths, {
            globalParameters: (schema.components && schema.components.parameters) || schema.parameters,
            immutableTypes,
            operations,
            version,
        });
    }
    output += `}\n\n`;
    switch (version) {
        case 2: {
            if (schema.definitions) {
                output += `export interface definitions {\n  ${schema_1.transformSchemaObjMap(schema.definitions, {
                    formatter,
                    immutableTypes,
                    required: Object.keys(schema.definitions),
                    version,
                })}\n}\n\n`;
            }
            if (schema.parameters) {
                const required = Object.keys(schema.parameters);
                output += `export interface parameters {\n    ${schema_1.transformSchemaObjMap(schema.parameters, {
                    formatter,
                    immutableTypes,
                    required,
                    version,
                })}\n  }\n\n`;
            }
            if (schema.responses) {
                output += `export interface responses {\n    ${responses_1.transformResponsesObj(schema.responses, {
                    formatter,
                    immutableTypes,
                    version,
                })}\n  }\n\n`;
            }
            break;
        }
        case 3: {
            output += `export interface components {\n`;
            if (schema.components) {
                if (schema.components.schemas) {
                    const required = Object.keys(schema.components.schemas);
                    output += `  ${readonly}schemas: {\n    ${schema_1.transformSchemaObjMap(schema.components.schemas, {
                        formatter,
                        immutableTypes,
                        required,
                        version,
                    })}\n  }\n`;
                }
                if (schema.components.responses) {
                    output += `  ${readonly}responses: {\n    ${responses_1.transformResponsesObj(schema.components.responses, {
                        formatter,
                        immutableTypes,
                        version,
                    })}\n  }\n`;
                }
                if (schema.components.parameters) {
                    const required = Object.keys(schema.components.parameters);
                    output += `  ${readonly}parameters: {\n    ${schema_1.transformSchemaObjMap(schema.components.parameters, {
                        formatter,
                        immutableTypes,
                        required,
                        version,
                    })}\n  }\n`;
                }
                if (schema.components.requestBodies) {
                    output += `  ${readonly}requestBodies: {\n    ${responses_1.transformRequestBodies(schema.components.requestBodies, {
                        formatter,
                        immutableTypes,
                        version,
                    })}\n  }\n`;
                }
                if (schema.components.headers) {
                    output += `  ${readonly}headers: {\n    ${headers_1.transformHeaderObjMap(schema.components.headers, {
                        formatter,
                        immutableTypes,
                        version,
                    })}  }\n`;
                }
            }
            output += `}\n\n`;
            break;
        }
    }
    output += `export interface operations {\n`;
    if (Object.keys(operations).length) {
        Object.entries(operations).forEach(([operationId, { operation, pathItem }]) => {
            if (operation.description)
                output += utils_1.comment(operation.description);
            output += `  ${readonly}"${operationId}": {\n    ${operation_1.transformOperationObj(operation, {
                pathItem,
                globalParameters: (schema.components && schema.components.parameters) || schema.parameters,
                immutableTypes,
                version,
            })}\n  }\n`;
        });
    }
    output += `}\n`;
    return output.trim();
}
exports.transformAll = transformAll;
//# sourceMappingURL=index.js.map