"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformRequestBodyObj = exports.transformOperationObj = void 0;
const utils_1 = require("../utils");
const parameters_1 = require("./parameters");
const responses_1 = require("./responses");
const schema_1 = require("./schema");
function transformOperationObj(operation, { globalParameters, immutableTypes, pathItem = {}, version, }) {
    const readonly = utils_1.tsReadonly(immutableTypes);
    let output = "";
    if (operation.parameters || pathItem.parameters) {
        const parameters = (pathItem.parameters || []).concat(operation.parameters || []);
        output += `  ${readonly}parameters: {\n    ${parameters_1.transformParametersArray(parameters, {
            globalParameters,
            immutableTypes,
            version,
        })}\n  }\n`;
    }
    if (operation.responses) {
        output += `  ${readonly}responses: {\n  ${responses_1.transformResponsesObj(operation.responses, {
            immutableTypes,
            version,
        })}\n  }\n`;
    }
    if (operation.requestBody) {
        if (utils_1.isRef(operation.requestBody)) {
            output += `  ${readonly}requestBody: ${utils_1.transformRef(operation.requestBody.$ref)};\n`;
        }
        else {
            if (operation.requestBody.description)
                output += utils_1.comment(operation.requestBody.description);
            output += `  ${readonly}requestBody: {\n`;
            output += `  ${transformRequestBodyObj(operation.requestBody, { immutableTypes, version })}`;
            output += `  }\n`;
        }
    }
    return output;
}
exports.transformOperationObj = transformOperationObj;
function transformRequestBodyObj(requestBody, { immutableTypes, version }) {
    const readonly = utils_1.tsReadonly(immutableTypes);
    let output = "";
    const { content } = requestBody;
    if (content && Object.keys(content).length) {
        output += `  ${readonly}content: {\n`;
        Object.entries(content).forEach(([k, v]) => {
            output += `      ${readonly}"${k}": ${schema_1.transformSchemaObj(v.schema, { immutableTypes, version })};\n`;
        });
        output += `    }\n`;
    }
    else {
        output += `  unknown;\n`;
    }
    return output;
}
exports.transformRequestBodyObj = transformRequestBodyObj;
//# sourceMappingURL=operation.js.map