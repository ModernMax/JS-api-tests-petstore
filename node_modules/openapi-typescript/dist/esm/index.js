import path from "path";
import prettier from "prettier";
import parserTypescript from "prettier/parser-typescript";
import { swaggerVersion } from "./utils";
import { transformAll } from "./transform/index";
export * from "./types";
export const WARNING_MESSAGE = `/**
* This file was auto-generated by openapi-typescript.
* Do not make direct changes to the file.
*/


`;
export default function openapiTS(schema, options) {
    const version = (options && options.version) || swaggerVersion(schema);
    let output = `${WARNING_MESSAGE}
  ${transformAll(schema, {
        formatter: options && typeof options.formatter === "function" ? options.formatter : undefined,
        immutableTypes: (options && options.immutableTypes) || false,
        rawSchema: options && options.rawSchema,
        version,
    })}
`;
    let prettierOptions = {
        parser: "typescript",
        plugins: [parserTypescript],
    };
    if (options && options.prettierConfig) {
        try {
            const userOptions = prettier.resolveConfig.sync(path.resolve(process.cwd(), options.prettierConfig));
            prettierOptions = {
                ...(userOptions || {}),
                ...prettierOptions,
                plugins: [...prettierOptions.plugins, ...((userOptions && userOptions.plugins) || [])],
            };
        }
        catch (err) {
            console.error(`‚ùå ${err}`);
        }
    }
    return prettier.format(output, prettierOptions);
}
//# sourceMappingURL=index.js.map