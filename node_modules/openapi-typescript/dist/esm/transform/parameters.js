import { comment, tsReadonly } from "../utils";
import { transformSchemaObj } from "./schema";
export function transformParametersArray(parameters, { globalParameters, immutableTypes, version, }) {
    const readonly = tsReadonly(immutableTypes);
    let output = "";
    let mappedParams = {};
    parameters.forEach((paramObj) => {
        if (paramObj.$ref && globalParameters) {
            const paramName = paramObj.$ref.split("/").pop();
            if (globalParameters[paramName]) {
                const reference = globalParameters[paramName];
                if (!mappedParams[reference.in])
                    mappedParams[reference.in] = {};
                if (version === 2) {
                    mappedParams[reference.in][reference.name || paramName] = {
                        ...reference,
                        $ref: paramObj.$ref,
                    };
                }
                else if (version === 3) {
                    mappedParams[reference.in][reference.name || paramName] = {
                        ...reference,
                        schema: { $ref: paramObj.$ref },
                    };
                }
            }
            return;
        }
        if (!paramObj.in || !paramObj.name)
            return;
        if (!mappedParams[paramObj.in])
            mappedParams[paramObj.in] = {};
        mappedParams[paramObj.in][paramObj.name] = paramObj;
    });
    Object.entries(mappedParams).forEach(([paramIn, paramGroup]) => {
        output += `  ${readonly}${paramIn}: {\n`;
        Object.entries(paramGroup).forEach(([paramName, paramObj]) => {
            let paramComment = "";
            if (paramObj.deprecated)
                paramComment += `@deprecated `;
            if (paramObj.description)
                paramComment += paramObj.description;
            if (paramComment)
                output += comment(paramComment);
            const required = paramObj.required ? `` : `?`;
            let paramType = ``;
            if (version === 2) {
                if (paramObj.in === "body" && paramObj.schema) {
                    paramType = transformSchemaObj(paramObj.schema, { immutableTypes, version });
                }
                else if (paramObj.type) {
                    paramType = transformSchemaObj(paramObj, { immutableTypes, version });
                }
                else {
                    paramType = "unknown";
                }
            }
            else if (version === 3) {
                paramType = paramObj.schema ? transformSchemaObj(paramObj.schema, { immutableTypes, version }) : "unknown";
            }
            output += `    ${readonly}"${paramName}"${required}: ${paramType};\n`;
        });
        output += `  }\n`;
    });
    return output;
}
//# sourceMappingURL=parameters.js.map