"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlIsNotDescribedInOpenApiError = exports.JSONSchemaCannotBeCompiledError = exports.MultipleJSONSchemasDefinedError = exports.JSONSchemaMissingError = exports.ResponseDoesNotMatchJSONSchemaError = exports.OpenApiValidationError = void 0;
class OpenApiValidationError extends Error {
    constructor() {
        super(...arguments);
        this.isOpenApiValidationError = true;
    }
}
exports.OpenApiValidationError = OpenApiValidationError;
class ResponseDoesNotMatchJSONSchemaError extends OpenApiValidationError {
    constructor(validationResult) {
        super(`
        Response does not match defined Open API JSON schema.

        Response:
        ${validationResult.response.method} | ${validationResult.response.requestUrl} | ${validationResult.response.statusCode}

        Body:
        ${JSON.stringify(validationResult.response.body, null, 2)}

        Validation errors:
        ${JSON.stringify(validationResult.validationErrors, null, 2)}
        `);
        this.validationResult = validationResult;
        this.name = 'ResponseDoesNotMatchJSONSchemaError';
    }
}
exports.ResponseDoesNotMatchJSONSchemaError = ResponseDoesNotMatchJSONSchemaError;
class JSONSchemaMissingError extends OpenApiValidationError {
    constructor(response) {
        super(`
        OpenApi spec does not contain body schema found for response: 
        ${response.method} | ${response.requestUrl} | ${response.statusCode}
        Validation cannot be done
        `);
        this.name = 'JSONSchemaMissingError';
    }
}
exports.JSONSchemaMissingError = JSONSchemaMissingError;
class MultipleJSONSchemasDefinedError extends OpenApiValidationError {
    constructor(response) {
        super(`
        OpenApi has multiple schemas defined for response: 
        ${response.method} | ${response.requestUrl} | ${response.statusCode}
        Validation cannot be done
        `);
        this.name = 'MultipleJSONSchemasDefinedError';
    }
}
exports.MultipleJSONSchemasDefinedError = MultipleJSONSchemasDefinedError;
class JSONSchemaCannotBeCompiledError extends OpenApiValidationError {
    constructor(response, jsonSchemaCompilationError) {
        super(`
        JSON schema for response:
        ${response.method} | ${response.requestUrl} | ${response.statusCode}
        is found, but cannot be used since AJV cannot compile schema. This is OpenApi spec issue.

        Got AJV error ${jsonSchemaCompilationError.name} with message:
        ${jsonSchemaCompilationError.message}

        Validation cannot be done
        `);
        this.name = 'JSONSchemaCannotBeCompiledError';
    }
}
exports.JSONSchemaCannotBeCompiledError = JSONSchemaCannotBeCompiledError;
class UrlIsNotDescribedInOpenApiError extends OpenApiValidationError {
    constructor(url) {
        super(`
        OpenApi specification does not contain specification for ${url} 
        `);
        this.name = 'UrlIsNotDescribedInOpenApiError';
    }
}
exports.UrlIsNotDescribedInOpenApiError = UrlIsNotDescribedInOpenApiError;
//# sourceMappingURL=Errors.js.map